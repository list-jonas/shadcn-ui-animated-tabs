{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-tabs",
  "type": "registry:block",
  "title": "Animated Tabs",
  "description": "A tabs component that looks and works like the shadcn one but has animated tab transitions.",
  "files": [
    {
      "path": "registry/animated-tabs/animated-tabs.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => {\n  const [indicatorStyle, setIndicatorStyle] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n  });\n  const tabsListRef = useRef<HTMLDivElement | null>(null);\n\n  const updateIndicator = React.useCallback(() => {\n    if (!tabsListRef.current) return;\n\n    const activeTab = tabsListRef.current.querySelector<HTMLElement>(\n      '[data-state=\"active\"]'\n    );\n    if (!activeTab) return;\n\n    const activeRect = activeTab.getBoundingClientRect();\n    const tabsRect = tabsListRef.current.getBoundingClientRect();\n\n    requestAnimationFrame(() => {\n      setIndicatorStyle({\n        left: activeRect.left - tabsRect.left,\n        top: activeRect.top - tabsRect.top,\n        width: activeRect.width,\n        height: activeRect.height,\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    // Initial update\n    const timeoutId = setTimeout(updateIndicator, 0);\n\n    // Event listeners\n    window.addEventListener(\"resize\", updateIndicator);\n    const observer = new MutationObserver(updateIndicator);\n\n    if (tabsListRef.current) {\n      observer.observe(tabsListRef.current, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n      });\n    }\n\n    return () => {\n      clearTimeout(timeoutId);\n      window.removeEventListener(\"resize\", updateIndicator);\n      observer.disconnect();\n    };\n  }, [updateIndicator]);\n\n  return (\n    <div className=\"relative\" ref={tabsListRef}>\n      <TabsPrimitive.List\n        ref={ref}\n        className={cn(\n          \"relative inline-flex items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n          className\n        )}\n        {...props}\n      />\n      <div\n        className=\"absolute rounded-md bg-background shadow-sm transition-all duration-300 ease-in-out\"\n        style={indicatorStyle}\n      />\n    </div>\n  );\n});\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground z-10\",\n      className\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsContent, TabsList, TabsTrigger };\n",
      "type": "registry:component"
    }
  ]
}